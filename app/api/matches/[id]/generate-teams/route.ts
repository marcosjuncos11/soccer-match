import { NextResponse } from "next/server"
import { sql } from "@/lib/db"
import { generateObject } from "ai"
import { groq } from "@ai-sdk/groq"
import { z } from "zod"

// Define the schema for the AI response with more flexibility
const teamGenerationSchema = z.object({
  team1: z.object({
    players: z.array(
      z.object({
        playerId: z.string(),
        playerName: z.string(),
        assignedPosition: z.string(),
        reasoning: z.string(),
      }),
    ),
    formation: z.string(),
    strengths: z.array(z.string()),
    weaknesses: z.array(z.string()),
  }),
  team2: z.object({
    players: z.array(
      z.object({
        playerId: z.string(),
        playerName: z.string(),
        assignedPosition: z.string(),
        reasoning: z.string(),
      }),
    ),
    formation: z.string(),
    strengths: z.array(z.string()),
    weaknesses: z.array(z.string()),
  }),
  balanceAnalysis: z.object({
    overallBalance: z.number().min(1).max(10),
    explanation: z.string(),
    recommendations: z.array(z.string()),
  }),
  teamBuildingStrategy: z.object({
    approach: z.string(),
    keyDecisions: z.array(z.string()),
    balancingFactors: z.array(z.string()),
    expectedOutcome: z.string(),
    coachingTips: z.array(z.string()),
  }),
})

export async function POST(request: Request, { params }: { params: { id: string } }) {
  try {
    console.log("üöÄ Iniciando generaci√≥n de equipos con IA para partido:", params.id)

    // Get match details
    const match = await sql`
      SELECT * FROM "Match" WHERE id = ${params.id}
    `

    if (match.length === 0) {
      return NextResponse.json({ error: "Partido no encontrado" }, { status: 404 })
    }

    // Get signups for this match (only active players, not waiting or meal-only)
    const signups = await sql`
      SELECT s.*, p.primary_position, p.secondary_position, p.speed, p.control, p.physical_condition, p.attitude
      FROM "Signup" s
      LEFT JOIN "Player" p ON s.player_id = p.id
      WHERE s."matchId" = ${params.id}
      AND s."isWaiting" = false
      AND s."mealOnly" = false
      ORDER BY s."signupTime" ASC
    `

    console.log("üìä Jugadores encontrados para equipos:", signups.length)

    if (signups.length < 2) {
      return NextResponse.json({ error: "Se necesitan al menos 2 jugadores para generar equipos" }, { status: 400 })
    }

    // Create a simple mapping for IDs to make it easier for AI
    const playerMapping: { [key: string]: any } = {}
    const playersData = signups.map((signup, index) => {
      const simpleId = `player_${index + 1}`
      playerMapping[simpleId] = signup

      return {
        playerId: simpleId,
        playerName: signup.playerName,
        isGuest: signup.is_guest,
        primaryPosition: signup.primary_position || "mediocampo",
        secondaryPosition: signup.secondary_position,
        speed: signup.speed || 5,
        control: signup.control || 5,
        physicalCondition: signup.physical_condition || 5,
        attitude: signup.attitude || 5,
        overallRating: Math.round(
          ((signup.speed || 5) + (signup.control || 5) + (signup.physical_condition || 5) + (signup.attitude || 5)) / 4,
        ),
      }
    })

    console.log("üéØ Datos de jugadores preparados:", playersData.length)

    // Calculate team sizes
    const totalPlayers = playersData.length
    const team1Size = Math.floor(totalPlayers / 2)
    const team2Size = totalPlayers - team1Size

    // Count goalkeepers
    const goalkeepers = playersData.filter((p) => p.primaryPosition === "arquero")
    const goalkeeperCount = goalkeepers.length

    console.log(`‚öñÔ∏è Divisi√≥n de equipos: Equipo 1: ${team1Size} jugadores, Equipo 2: ${team2Size} jugadores`)
    console.log(`ü•Ö Arqueros disponibles: ${goalkeeperCount}`)

    // Helper function to suggest formations based on team size
    const getFormationSuggestions = (teamSize: number) => {
      switch (teamSize) {
        case 3:
          return ["1-1-1", "2-1", "1-2"]
        case 4:
          return ["1-2-1", "2-2", "1-1-2"]
        case 5:
          return ["1-2-2", "1-3-1", "2-2-1"]
        case 6:
          return ["1-2-3", "1-3-2", "2-2-2"]
        case 7:
          return ["1-3-3", "1-2-4", "2-3-2"]
        case 8:
          return ["1-3-4", "1-4-3", "2-3-3"]
        case 9:
          return ["1-4-4", "1-3-5", "2-4-3"]
        case 10:
          return ["1-4-5", "1-5-4", "2-4-4"]
        case 11:
          return ["1-4-4-2", "1-4-3-3", "1-3-5-2"]
        default:
          if (teamSize <= 2) return [`${teamSize}-0`]
          return [`1-${Math.floor((teamSize - 1) / 2)}-${Math.ceil((teamSize - 1) / 2)}`]
      }
    }

    const team1Formations = getFormationSuggestions(team1Size)
    const team2Formations = getFormationSuggestions(team2Size)

    // Create goalkeeper distribution instructions
    let goalkeeperInstructions = ""
    if (goalkeeperCount === 0) {
      goalkeeperInstructions = `
‚ö†Ô∏è NO HAY ARQUEROS DISPONIBLES:
- Ambos equipos jugar√°n sin arquero dedicado
- Ning√∫n jugador debe ser asignado como "arquero"
- Usar formaciones sin arquero (ej: 2-1, 3-1, etc.)
`
    } else if (goalkeeperCount === 1) {
      goalkeeperInstructions = `
ü•Ö DISTRIBUCI√ìN DE ARQUERO (1 disponible):
- EXACTAMENTE 1 arquero debe ir al Equipo 1
- El Equipo 2 NO tendr√° arquero
- Arquero disponible: ${goalkeepers[0].playerName} (${goalkeepers[0].playerId})
- OBLIGATORIO: Asignar este arquero al Equipo 1
`
    } else if (goalkeeperCount === 2) {
      goalkeeperInstructions = `
ü•Ö DISTRIBUCI√ìN DE ARQUEROS (2 disponibles):
- EXACTAMENTE 1 arquero por equipo
- Equipo 1: 1 arquero
- Equipo 2: 1 arquero
- Arqueros disponibles: ${goalkeepers.map((gk) => `${gk.playerName} (${gk.playerId})`).join(", ")}
- OBLIGATORIO: Distribuir uno en cada equipo
`
    } else {
      goalkeeperInstructions = `
ü•Ö DISTRIBUCI√ìN DE ARQUEROS (${goalkeeperCount} disponibles):
- M√ÅXIMO 1 arquero por equipo
- Equipo 1: 1 arquero
- Equipo 2: 1 arquero
- Arqueros disponibles: ${goalkeepers.map((gk) => `${gk.playerName} (${gk.playerId})`).join(", ")}
- OBLIGATORIO: Seleccionar solo 2 arqueros (1 por equipo)
- Los arqueros restantes deben jugar en su posici√≥n secundaria o como mediocampo
`
    }

    // Create the prompt with all players
    const prompt = `

Eres un seleccionador de equipos de futbol/soccer profesional. Tu objetivo es distribuir jugadores en 2 equipos de manera balanceada, RESPETANDO ESTRICTAMENTE las reglas de arqueros y posiciones.

üö® REGLAS CR√çTICAS DE ARQUEROS (OBLIGATORIAS):
1. M√ÅXIMO 1 ARQUERO POR EQUIPO
2. NUNCA pongas 2 arqueros en el mismo equipo
3. Si hay 2+ arqueros disponibles, EXACTAMENTE 1 por equipo
4. Si hay 1 arquero, va al equipo m√°s grande
5. Si hay 0 arqueros, ning√∫n equipo tiene arquero

${goalkeeperInstructions}

REGLAS FUNDAMENTALES DE POSICIONES:
1. NUNCA asignes un jugador a una posici√≥n que no sea su posici√≥n principal o secundaria
2. Un jugador de "mediocampo" NUNCA puede ser asignado como "arquero"
3. Un jugador de "delantero" NUNCA puede ser asignado como "arquero"
4. Un jugador de "defensor" NUNCA puede ser asignado como "arquero"
5. Solo jugadores con posici√≥n "arquero" pueden ser asignados como "arquero"
6. SIEMPRE prioriza la posici√≥n principal del jugador
7. Solo usa la posici√≥n secundaria si es absolutamente necesario para el balance

INSTRUCCIONES IMPORTANTES:
- Es un partido de soccer
- Debes usar TODOS los ${totalPlayers} jugadores listados abajo
- Equipo 1 debe tener exactamente ${team1Size} jugadores
- Equipo 2 debe tener exactamente ${team2Size} jugadores
- NO puedes omitir ning√∫n jugador
- Cada jugador debe estar en exactamente un equipo
- RESPETA ESTRICTAMENTE las reglas de arqueros y posiciones

FORMACIONES APROPIADAS:
- Para Equipo 1 (${team1Size} jugadores): ${team1Formations.join(", ")}
- Para Equipo 2 (${team2Size} jugadores): ${team2Formations.join(", ")}

IMPORTANTE: La formaci√≥n debe coincidir EXACTAMENTE con el n√∫mero de jugadores en cada equipo.
Formato de formaci√≥n: Arquero-Defensores-Mediocampistas-Delanteros (ej: 1-2-1 para 4 jugadores)

LISTA COMPLETA DE JUGADORES INSCRITOS (${totalPlayers} jugadores):
${playersData
  .map(
    (player, index) => `
${index + 1}. ID: ${player.playerId}
   - Nombre: ${player.playerName} ${player.isGuest ? "(Invitado)" : ""}
   - Posici√≥n Principal: ${player.primaryPosition} ${player.primaryPosition === "arquero" ? "ü•Ö ARQUERO" : ""} ‚Üê DEBE SER RESPETADA
   - Posici√≥n Secundaria: ${player.secondaryPosition || "Ninguna"} ‚Üê Solo usar si es necesario
   - Velocidad: ${player.speed}/10
   - Habilidad: ${player.control}/10
   - F√≠sico: ${player.physicalCondition}/10
   - Actitud: ${player.attitude}/10
   - Rating General: ${player.overallRating}/10`,
  )
  .join("")}

OBJETIVO: Crear dos equipos equilibrados usando TODOS los jugadores listados arriba, RESPETANDO las reglas de arqueros y posiciones naturales.

CRITERIOS DE EQUILIBRIO (en orden de prioridad):
1. RESPETAR las reglas de arqueros (M√ÅXIMO 1 por equipo) - OBLIGATORIO
2. RESPETAR las posiciones principales de cada jugador (OBLIGATORIO)
3. Distribuci√≥n equitativa de habilidades (velocidad, control, f√≠sico, actitud)
4. Balance de posiciones apropiado para el n√∫mero de jugadores
5. Mezcla de jugadores experimentados e invitados
6. Formaciones t√°cticas realistas para el n√∫mero de jugadores disponibles

REGLAS DE ASIGNACI√ìN DE POSICIONES:
- Si un jugador tiene posici√≥n principal "arquero" ‚Üí assignedPosition: "arquero" (M√ÅXIMO 1 POR EQUIPO)
- Si un jugador tiene posici√≥n principal "defensor" ‚Üí assignedPosition: "defensor"
- Si un jugador tiene posici√≥n principal "mediocampo" ‚Üí assignedPosition: "mediocampo"
- Si un jugador tiene posici√≥n principal "delantero" ‚Üí assignedPosition: "delantero"
- NUNCA cambies la posici√≥n principal de un jugador
- Solo usa posici√≥n secundaria si no hay suficientes jugadores para una posici√≥n espec√≠fica

VALIDACI√ìN OBLIGATORIA ANTES DE RESPONDER:
‚úÖ Verificar que Equipo 1 tenga M√ÅXIMO 1 arquero
‚úÖ Verificar que Equipo 2 tenga M√ÅXIMO 1 arquero
‚úÖ Verificar que ning√∫n jugador de "mediocampo" est√© asignado como "arquero"
‚úÖ Verificar que ning√∫n jugador de "delantero" est√© asignado como "arquero"  
‚úÖ Verificar que ning√∫n jugador de "defensor" est√© asignado como "arquero"
‚úÖ Verificar que solo jugadores con posici√≥n "arquero" est√©n asignados como "arquero"
‚úÖ Verificar que cada jugador mantenga su posici√≥n principal o secundaria

FORMATO DE RESPUESTA (JSON v√°lido):
{
  "team1": {
    "players": [
      {
        "playerId": "player_X",
        "playerName": "Nombre exacto del jugador",
        "assignedPosition": "DEBE SER LA POSICI√ìN PRINCIPAL O SECUNDARIA DEL JUGADOR",
        "reasoning": "Explicar por qu√© se asign√≥ esta posici√≥n respetando su posici√≥n natural y las reglas de arqueros"
      }
    ],
    "formation": "Formaci√≥n apropiada para ${team1Size} jugadores (ej: ${team1Formations[0]})",
    "strengths": ["Fortaleza principal 1", "Fortaleza principal 2", "Fortaleza principal 3"],
    "weaknesses": ["Debilidad potencial 1", "Debilidad potencial 2"]
  },
  "team2": {
    "players": [
      {
        "playerId": "player_Y",
        "playerName": "Nombre exacto del jugador", 
        "assignedPosition": "DEBE SER LA POSICI√ìN PRINCIPAL O SECUNDARIA DEL JUGADOR",
        "reasoning": "Explicar por qu√© se asign√≥ esta posici√≥n respetando su posici√≥n natural y las reglas de arqueros"
      }
    ],
    "formation": "Formaci√≥n apropiada para ${team2Size} jugadores (ej: ${team2Formations[0]})",
    "strengths": ["Fortaleza principal 1", "Fortaleza principal 2", "Fortaleza principal 3"],
    "weaknesses": ["Debilidad potencial 1", "Debilidad potencial 2"]
  },
  "balanceAnalysis": {
    "overallBalance": 8,
    "explanation": "An√°lisis detallado del equilibrio entre equipos, explicando c√≥mo se respetaron las reglas de arqueros y posiciones naturales",
    "recommendations": ["Recomendaci√≥n t√°ctica 1", "Recomendaci√≥n t√°ctica 2"]
  },
  "teamBuildingStrategy": {
    "approach": "Descripci√≥n del enfoque estrat√©gico respetando las reglas de arqueros y posiciones naturales",
    "keyDecisions": ["Decisi√≥n clave 1", "Decisi√≥n clave 2", "Decisi√≥n clave 3"],
    "balancingFactors": ["Distribuci√≥n correcta de arqueros", "Respeto a posiciones naturales", "Factor de equilibrio 3"],
    "expectedOutcome": "Predicci√≥n del resultado considerando la distribuci√≥n correcta de arqueros",
    "coachingTips": ["Consejo basado en distribuci√≥n de arqueros", "Consejo basado en posiciones naturales"]
  }
}

VERIFICACI√ìN FINAL OBLIGATORIA:
- Equipo 1: ${team1Size} jugadores con formaci√≥n apropiada y M√ÅXIMO 1 arquero
- Equipo 2: ${team2Size} jugadores con formaci√≥n apropiada y M√ÅXIMO 1 arquero
- Total: ${totalPlayers} jugadores (todos incluidos)
- TODOS los jugadores mantienen su posici√≥n principal o secundaria
- M√ÅXIMO 1 arquero por equipo (NUNCA 2 arqueros en el mismo equipo)
- Las formaciones deben sumar exactamente el n√∫mero de jugadores en cada equipo

Usa EXACTAMENTE los IDs proporcionados (${playersData.map((p) => p.playerId).join(", ")}).

üö® RECUERDA: Es FUNDAMENTAL respetar la regla de M√ÅXIMO 1 ARQUERO POR EQUIPO. NUNCA pongas 2 arqueros en el mismo equipo.
`

    console.log("ü§ñ Enviando prompt a IA con reglas estrictas de arqueros...")

    // Generate teams using Groq AI
    const result = await generateObject({
      model: groq("llama3-8b-8192"),
      schema: teamGenerationSchema,
      prompt: prompt,
      temperature: 0.1, // Lower temperature for more consistent output
    })

    console.log("‚úÖ Respuesta de IA recibida")
    console.log("üìã Equipo 1 jugadores:", result.object.team1.players.length)
    console.log("üìã Equipo 1 formaci√≥n:", result.object.team1.formation)
    console.log("üìã Equipo 2 jugadores:", result.object.team2.players.length)
    console.log("üìã Equipo 2 formaci√≥n:", result.object.team2.formation)

    // Validate goalkeeper distribution
    const team1Goalkeepers = result.object.team1.players.filter((p) => p.assignedPosition === "arquero")
    const team2Goalkeepers = result.object.team2.players.filter((p) => p.assignedPosition === "arquero")

    console.log("ü•Ö Arqueros Equipo 1:", team1Goalkeepers.length)
    console.log("ü•Ö Arqueros Equipo 2:", team2Goalkeepers.length)

    if (team1Goalkeepers.length > 1 || team2Goalkeepers.length > 1) {
      console.error("‚ùå Error: M√°s de 1 arquero por equipo detectado")
      return NextResponse.json(
        {
          error: "Error en la distribuci√≥n de arqueros: m√°s de 1 arquero por equipo",
        },
        { status: 500 },
      )
    }

    console.log(
      "üìã Total jugadores asignados:",
      result.object.team1.players.length + result.object.team2.players.length,
    )

    // Verify all players are included
    const assignedPlayerIds = [
      ...result.object.team1.players.map((p) => p.playerId),
      ...result.object.team2.players.map((p) => p.playerId),
    ]
    const originalPlayerIds = playersData.map((p) => p.playerId)

    console.log("üîç Verificando que todos los jugadores est√©n incluidos...")

    // Check for missing players
    const missingPlayers = originalPlayerIds.filter((id) => !assignedPlayerIds.includes(id))
    if (missingPlayers.length > 0) {
      console.warn("‚ö†Ô∏è Jugadores faltantes:", missingPlayers)
    }

    // Convert simple IDs back to real IDs
    const convertedTeams = {
      ...result.object,
      team1: {
        ...result.object.team1,
        players: result.object.team1.players.map((player) => ({
          ...player,
          playerId: playerMapping[player.playerId]?.id || player.playerId,
        })),
      },
      team2: {
        ...result.object.team2,
        players: result.object.team2.players.map((player) => ({
          ...player,
          playerId: playerMapping[player.playerId]?.id || player.playerId,
        })),
      },
    }

    console.log("üîÑ Equipos convertidos con IDs reales")
    console.log("‚úÖ Generaci√≥n de equipos completada exitosamente")

    return NextResponse.json({
      success: true,
      teams: convertedTeams,
      playersAnalyzed: playersData.length,
      team1Size: result.object.team1.players.length,
      team2Size: result.object.team2.players.length,
      totalPlayersAssigned: result.object.team1.players.length + result.object.team2.players.length,
      goalkeeperDistribution: {
        team1Goalkeepers: team1Goalkeepers.length,
        team2Goalkeepers: team2Goalkeepers.length,
        totalGoalkeepers: goalkeeperCount,
      },
      matchId: params.id,
      provider: "groq",
      model: "llama3-8b-8192",
    })
  } catch (error) {
    console.error("‚ùå Error al generar equipos con IA:", error)

    if (error instanceof Error) {
      console.error("Error message:", error.message)
      console.error("Error stack:", error.stack)
    }

    return NextResponse.json(
      {
        error: "Error al generar equipos con IA",
        details: error instanceof Error ? error.message : "Error desconocido",
        provider: "groq",
      },
      { status: 500 },
    )
  }
}
